kind: Template
apiVersion: v1
metadata:
  name: mongodb-persistent
  annotations:
    openshift.io/display-name: MongoDB (Persistent)
    description: |-
      MongoDB database service, with persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mongodb-container/blob/master/3.2/README.md.

      NOTE: Scaling to more than one replica is not supported. You must have persistent volumes available in your cluster to use this template.
    iconClass: icon-mongodb
    tags: database,mongodb
    openshift.io/long-description: This template provides a standalone MongoDB server
      with a database created.  The database is stored on persistent storage.  The
      database name, username, and password are chosen via parameters when provisioning
      this service.
    openshift.io/provider-display-name: Red Hat, Inc.
    openshift.io/documentation-url: https://docs.openshift.org/latest/using_images/db_images/mongodb.html
    openshift.io/support-url: https://access.redhat.com
labels:
  template: mongodb-persistent-template
objects:
- kind: Service
  apiVersion: v1
  metadata:
    name: mongodb
    annotations:
      template.openshift.io/expose-uri: mongodb://{.spec.clusterIP}:{.spec.ports[?(.name=="mongo")].port}
  spec:
    ports:
    - name: mongo
      protocol: TCP
      port: 27017
      targetPort: 27017
      nodePort: 0
    selector:
      name: mongodb
    type: ClusterIP
    sessionAffinity: None
  status:
    loadBalancer: {}
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: mongodb
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: mongodb
    annotations:
      template.alpha.openshift.io/wait-for-ready: 'true'
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ConfigChange
    replicas: 1
    selector:
      name: mongodb
    template:
      metadata:
        labels:
          name: mongodb
      spec:
        containers:
        - name: mongodb
          image: registry.centos.org/sclo/mongodb-32-centos7:latest
          ports:
          - containerPort: 27017
            protocol: TCP
          readinessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 3
            exec:
              command:
              - "/bin/sh"
              - "-i"
              - "-c"
              - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                --eval="quit()"
          livenessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 30
            tcpSocket:
              port: 27017
          env:
          - name: MONGODB_USER
            valueFrom:
              secretKeyRef:
                name: mongodb
                key: database-user
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mongodb
                key: database-password
          - name: MONGODB_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mongodb
                key: database-admin-password
          - name: MONGODB_DATABASE
            valueFrom:
              secretKeyRef:
                name: mongodb
                key: database-name
          resources: {}
          volumeMounts:
          - name: mongodb-data
            mountPath: "/var/lib/mongodb/data"
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: IfNotPresent
          capabilities: {}
          securityContext:
            capabilities: {}
            privileged: false
        volumes:
        - name: mongodb-data
          persistentVolumeClaim:
            claimName: mongodb
        restartPolicy: Always
        dnsPolicy: ClusterFirst
  status: {}
